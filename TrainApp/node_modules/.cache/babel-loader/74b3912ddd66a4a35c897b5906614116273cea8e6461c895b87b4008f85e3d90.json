{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tenci\\\\OneDrive\\\\Escritorio\\\\Nueva carpeta\\\\TREN_Aplicaci-n_web_cobros\\\\TrainApp\\\\src\\\\GraphVisualization.js\";\nimport React from 'react';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries } from 'react-vis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = ({\n  graphData\n}) => {\n  console.log('Graph data in visualization:', graphData);\n\n  // Assign positions for nodes\n  const nodePositions = {};\n  const angleIncrement = 2 * Math.PI / graphData.Nodos.length;\n  graphData.Nodos.forEach((nodo, index) => {\n    const angle = index * angleIncrement;\n    nodePositions[nodo.Nombre] = {\n      x: 50 + 40 * Math.cos(angle),\n      y: 50 + 40 * Math.sin(angle),\n      label: nodo.Nombre\n    };\n  });\n  const nodes = Object.values(nodePositions);\n  const edges = [];\n  graphData.Nodos.forEach(nodo => {\n    nodo.Aristas.forEach(arista => {\n      const startNode = nodePositions[nodo.Nombre];\n      const endNode = nodePositions[arista.Destino];\n      edges.push({\n        x: [startNode.x, endNode.x],\n        y: [startNode.y, endNode.y]\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(XYPlot, {\n    width: 600,\n    height: 600,\n    xDomain: [0, 100],\n    yDomain: [0, 100],\n    children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), edges.map((edge, index) => /*#__PURE__*/_jsxDEV(LineSeries, {\n      data: [{\n        x: edge.x[0],\n        y: edge.y[0]\n      }, {\n        x: edge.x[1],\n        y: edge.y[1]\n      }],\n      style: {\n        stroke: 'blue'\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(MarkSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y\n      })),\n      size: 5,\n      style: {\n        fill: 'red'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y,\n        label: node.label,\n        style: {\n          fill: 'black',\n          fontSize: '12px'\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineSeries","MarkSeries","LabelSeries","jsxDEV","_jsxDEV","GraphVisualization","graphData","console","log","nodePositions","angleIncrement","Math","PI","Nodos","length","forEach","nodo","index","angle","Nombre","x","cos","y","sin","label","nodes","Object","values","edges","Aristas","arista","startNode","endNode","Destino","push","width","height","xDomain","yDomain","children","fileName","_jsxFileName","lineNumber","columnNumber","map","edge","data","style","stroke","node","size","fill","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/tenci/OneDrive/Escritorio/Nueva carpeta/TREN_Aplicaci-n_web_cobros/TrainApp/src/GraphVisualization.js"],"sourcesContent":["import React from 'react';\r\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries } from 'react-vis';\r\n\r\nconst GraphVisualization = ({ graphData }) => {\r\n  console.log('Graph data in visualization:', graphData);\r\n\r\n  // Assign positions for nodes\r\n  const nodePositions = {};\r\n  const angleIncrement = (2 * Math.PI) / graphData.Nodos.length;\r\n  graphData.Nodos.forEach((nodo, index) => {\r\n    const angle = index * angleIncrement;\r\n    nodePositions[nodo.Nombre] = {\r\n      x: 50 + 40 * Math.cos(angle),\r\n      y: 50 + 40 * Math.sin(angle),\r\n      label: nodo.Nombre\r\n    };\r\n  });\r\n\r\n  const nodes = Object.values(nodePositions);\r\n\r\n  const edges = [];\r\n  graphData.Nodos.forEach((nodo) => {\r\n    nodo.Aristas.forEach((arista) => {\r\n      const startNode = nodePositions[nodo.Nombre];\r\n      const endNode = nodePositions[arista.Destino];\r\n\r\n      edges.push({\r\n        x: [startNode.x, endNode.x],\r\n        y: [startNode.y, endNode.y]\r\n      });\r\n    });\r\n  });\r\n\r\n  return (\r\n    <XYPlot width={600} height={600} xDomain={[0, 100]} yDomain={[0, 100]}>\r\n      <VerticalGridLines />\r\n      <HorizontalGridLines />\r\n      <XAxis />\r\n      <YAxis />\r\n      {edges.map((edge, index) => (\r\n        <LineSeries\r\n          key={index}\r\n          data={[\r\n            { x: edge.x[0], y: edge.y[0] },\r\n            { x: edge.x[1], y: edge.y[1] }\r\n          ]}\r\n          style={{ stroke: 'blue' }}\r\n        />\r\n      ))}\r\n      <MarkSeries\r\n        data={nodes.map((node) => ({ x: node.x, y: node.y }))}\r\n        size={5}\r\n        style={{ fill: 'red' }}\r\n      />\r\n      <LabelSeries\r\n        data={nodes.map((node) => ({\r\n          x: node.x,\r\n          y: node.y,\r\n          label: node.label,\r\n          style: { fill: 'black', fontSize: '12px' }\r\n        }))}\r\n      />\r\n    </XYPlot>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,iBAAiB,EAAEC,mBAAmB,EAAEC,UAAU,EAAEC,UAAU,EAAEC,WAAW,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9H,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAC5CC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,SAAS,CAAC;;EAEtD;EACA,MAAMG,aAAa,GAAG,CAAC,CAAC;EACxB,MAAMC,cAAc,GAAI,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAIN,SAAS,CAACO,KAAK,CAACC,MAAM;EAC7DR,SAAS,CAACO,KAAK,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IACvC,MAAMC,KAAK,GAAGD,KAAK,GAAGP,cAAc;IACpCD,aAAa,CAACO,IAAI,CAACG,MAAM,CAAC,GAAG;MAC3BC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAGT,IAAI,CAACU,GAAG,CAACH,KAAK,CAAC;MAC5BI,CAAC,EAAE,EAAE,GAAG,EAAE,GAAGX,IAAI,CAACY,GAAG,CAACL,KAAK,CAAC;MAC5BM,KAAK,EAAER,IAAI,CAACG;IACd,CAAC;EACH,CAAC,CAAC;EAEF,MAAMM,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAClB,aAAa,CAAC;EAE1C,MAAMmB,KAAK,GAAG,EAAE;EAChBtB,SAAS,CAACO,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAK;IAChCA,IAAI,CAACa,OAAO,CAACd,OAAO,CAAEe,MAAM,IAAK;MAC/B,MAAMC,SAAS,GAAGtB,aAAa,CAACO,IAAI,CAACG,MAAM,CAAC;MAC5C,MAAMa,OAAO,GAAGvB,aAAa,CAACqB,MAAM,CAACG,OAAO,CAAC;MAE7CL,KAAK,CAACM,IAAI,CAAC;QACTd,CAAC,EAAE,CAACW,SAAS,CAACX,CAAC,EAAEY,OAAO,CAACZ,CAAC,CAAC;QAC3BE,CAAC,EAAE,CAACS,SAAS,CAACT,CAAC,EAAEU,OAAO,CAACV,CAAC;MAC5B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,oBACElB,OAAA,CAACT,MAAM;IAACwC,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE,GAAI;IAACC,OAAO,EAAE,CAAC,CAAC,EAAE,GAAG,CAAE;IAACC,OAAO,EAAE,CAAC,CAAC,EAAE,GAAG,CAAE;IAAAC,QAAA,gBACpEnC,OAAA,CAACN,iBAAiB;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrBvC,OAAA,CAACL,mBAAmB;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvBvC,OAAA,CAACR,KAAK;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACTvC,OAAA,CAACP,KAAK;MAAA2C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACRf,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAE5B,KAAK,kBACrBb,OAAA,CAACJ,UAAU;MAET8C,IAAI,EAAE,CACJ;QAAE1B,CAAC,EAAEyB,IAAI,CAACzB,CAAC,CAAC,CAAC,CAAC;QAAEE,CAAC,EAAEuB,IAAI,CAACvB,CAAC,CAAC,CAAC;MAAE,CAAC,EAC9B;QAAEF,CAAC,EAAEyB,IAAI,CAACzB,CAAC,CAAC,CAAC,CAAC;QAAEE,CAAC,EAAEuB,IAAI,CAACvB,CAAC,CAAC,CAAC;MAAE,CAAC,CAC9B;MACFyB,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAO;IAAE,GALrB/B,KAAK;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMX,CACF,CAAC,eACFvC,OAAA,CAACH,UAAU;MACT6C,IAAI,EAAErB,KAAK,CAACmB,GAAG,CAAEK,IAAI,KAAM;QAAE7B,CAAC,EAAE6B,IAAI,CAAC7B,CAAC;QAAEE,CAAC,EAAE2B,IAAI,CAAC3B;MAAE,CAAC,CAAC,CAAE;MACtD4B,IAAI,EAAE,CAAE;MACRH,KAAK,EAAE;QAAEI,IAAI,EAAE;MAAM;IAAE;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eACFvC,OAAA,CAACF,WAAW;MACV4C,IAAI,EAAErB,KAAK,CAACmB,GAAG,CAAEK,IAAI,KAAM;QACzB7B,CAAC,EAAE6B,IAAI,CAAC7B,CAAC;QACTE,CAAC,EAAE2B,IAAI,CAAC3B,CAAC;QACTE,KAAK,EAAEyB,IAAI,CAACzB,KAAK;QACjBuB,KAAK,EAAE;UAAEI,IAAI,EAAE,OAAO;UAAEC,QAAQ,EAAE;QAAO;MAC3C,CAAC,CAAC;IAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEb,CAAC;AAACU,EAAA,GA7DIhD,kBAAkB;AA+DxB,eAAeA,kBAAkB;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
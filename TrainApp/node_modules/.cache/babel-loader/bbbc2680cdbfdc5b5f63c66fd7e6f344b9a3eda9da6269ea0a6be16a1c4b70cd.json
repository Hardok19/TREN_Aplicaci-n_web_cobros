{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tenci\\\\OneDrive\\\\Escritorio\\\\Nueva carpeta\\\\TREN_Aplicaci-n_web_cobros\\\\TrainApp\\\\src\\\\GraphVisualization.js\";\nimport React from 'react';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries } from 'react-vis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = ({\n  graphData\n}) => {\n  console.log('Graph data in visualization:', graphData);\n\n  // Assign positions for nodes\n  const nodePositions = {};\n  const angleIncrement = 2 * Math.PI / graphData.Nodos.length;\n  graphData.Nodos.forEach((nodo, index) => {\n    const angle = index * angleIncrement;\n    nodePositions[nodo.Nombre] = {\n      x: 250 + 200 * Math.cos(angle),\n      y: 100 + 100 * Math.sin(angle),\n      label: nodo.Nombre\n    };\n  });\n  const nodes = Object.values(nodePositions);\n  const edges = [];\n  const distanceLabels = [];\n  graphData.Nodos.forEach(nodo => {\n    nodo.Aristas.forEach(arista => {\n      const startNode = nodePositions[nodo.Nombre];\n      const endNode = nodePositions[arista.Destino];\n      edges.push({\n        x1: startNode.x,\n        y1: startNode.y,\n        x2: endNode.x,\n        y2: endNode.y,\n        distancia: arista.Distancia\n      });\n      const midX = (startNode.x + endNode.x) / 2;\n      const midY = (startNode.y + endNode.y) / 2;\n      distanceLabels.push({\n        x: midX,\n        y: midY,\n        label: `${arista.Distancia} km`,\n        style: {\n          fill: 'green',\n          fontSize: '13px'\n        }\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(XYPlot, {\n    width: 1000,\n    height: 600,\n    xDomain: [0, 500],\n    yDomain: [0, 200],\n    children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), edges.map((edge, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(LineSeries, {\n        data: [{\n          x: edge.x1,\n          y: edge.y1\n        }, {\n          x: edge.x2,\n          y: edge.y2\n        }],\n        style: {\n          stroke: 'blue'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MarkSeries, {\n        data: [{\n          x: edge.x2,\n          y: edge.y2\n        }],\n        size: 3,\n        style: {\n          fill: 'blue'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"marker\", {\n            id: `arrowhead-${index}`,\n            markerWidth: \"10\",\n            markerHeight: \"7\",\n            refX: \"10\",\n            refY: \"3.5\",\n            orient: \"auto\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"0 0, 10 3.5, 0 7\",\n              style: {\n                fill: 'blue'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: edge.x1,\n          y1: edge.y1,\n          x2: edge.x2,\n          y2: edge.y2,\n          style: {\n            stroke: 'blue',\n            strokeWidth: 2\n          },\n          markerEnd: `url(#arrowhead-${index})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(MarkSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y\n      })),\n      size: 5,\n      style: {\n        fill: 'red'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y,\n        label: node.label,\n        style: {\n          fill: 'black',\n          fontSize: '12px'\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: distanceLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineSeries","MarkSeries","LabelSeries","jsxDEV","_jsxDEV","GraphVisualization","graphData","console","log","nodePositions","angleIncrement","Math","PI","Nodos","length","forEach","nodo","index","angle","Nombre","x","cos","y","sin","label","nodes","Object","values","edges","distanceLabels","Aristas","arista","startNode","endNode","Destino","push","x1","y1","x2","y2","distancia","Distancia","midX","midY","style","fill","fontSize","width","height","xDomain","yDomain","children","fileName","_jsxFileName","lineNumber","columnNumber","map","edge","Fragment","data","stroke","size","id","markerWidth","markerHeight","refX","refY","orient","points","strokeWidth","markerEnd","node","_c","$RefreshReg$"],"sources":["C:/Users/tenci/OneDrive/Escritorio/Nueva carpeta/TREN_Aplicaci-n_web_cobros/TrainApp/src/GraphVisualization.js"],"sourcesContent":["import React from 'react';\r\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries } from 'react-vis';\r\n\r\nconst GraphVisualization = ({ graphData }) => {\r\n  console.log('Graph data in visualization:', graphData);\r\n\r\n  // Assign positions for nodes\r\n  const nodePositions = {};\r\n  const angleIncrement = (2 * Math.PI) / graphData.Nodos.length;\r\n  graphData.Nodos.forEach((nodo, index) => {\r\n    const angle = index * angleIncrement;\r\n    nodePositions[nodo.Nombre] = {\r\n      x: 250 + 200 * Math.cos(angle),\r\n      y: 100 + 100 * Math.sin(angle),\r\n      label: nodo.Nombre\r\n    };\r\n  });\r\n\r\n  const nodes = Object.values(nodePositions);\r\n\r\n  const edges = [];\r\n  const distanceLabels = [];\r\n  graphData.Nodos.forEach((nodo) => {\r\n    nodo.Aristas.forEach((arista) => {\r\n      const startNode = nodePositions[nodo.Nombre];\r\n      const endNode = nodePositions[arista.Destino];\r\n\r\n      edges.push({\r\n        x1: startNode.x,\r\n        y1: startNode.y,\r\n        x2: endNode.x,\r\n        y2: endNode.y,\r\n        distancia: arista.Distancia\r\n      });\r\n\r\n      const midX = (startNode.x + endNode.x) / 2;\r\n      const midY = (startNode.y + endNode.y) / 2;\r\n\r\n      distanceLabels.push({\r\n        x: midX,\r\n        y: midY,\r\n        label: `${arista.Distancia} km`,\r\n        style: { fill: 'green', fontSize: '13px' }\r\n      });\r\n    });\r\n  });\r\n\r\n  return (\r\n    <XYPlot width={1000} height={600} xDomain={[0, 500]} yDomain={[0, 200]}>\r\n      <VerticalGridLines />\r\n      <HorizontalGridLines />\r\n      <XAxis />\r\n      <YAxis />\r\n      {edges.map((edge, index) => (\r\n        <React.Fragment key={index}>\r\n          <LineSeries\r\n            data={[\r\n              { x: edge.x1, y: edge.y1 },\r\n              { x: edge.x2, y: edge.y2 }\r\n            ]}\r\n            style={{ stroke: 'blue' }}\r\n          />\r\n          <MarkSeries\r\n            data={[\r\n              { x: edge.x2, y: edge.y2 }\r\n            ]}\r\n            size={3}\r\n            style={{ fill: 'blue' }}\r\n          />\r\n          <svg>\r\n            <defs>\r\n              <marker\r\n                id={`arrowhead-${index}`}\r\n                markerWidth=\"10\"\r\n                markerHeight=\"7\"\r\n                refX=\"10\"\r\n                refY=\"3.5\"\r\n                orient=\"auto\"\r\n              >\r\n                <polygon points=\"0 0, 10 3.5, 0 7\" style={{ fill: 'blue' }} />\r\n              </marker>\r\n            </defs>\r\n            <line\r\n              x1={edge.x1}\r\n              y1={edge.y1}\r\n              x2={edge.x2}\r\n              y2={edge.y2}\r\n              style={{ stroke: 'blue', strokeWidth: 2 }}\r\n              markerEnd={`url(#arrowhead-${index})`}\r\n            />\r\n          </svg>\r\n        </React.Fragment>\r\n      ))}\r\n      <MarkSeries\r\n        data={nodes.map((node) => ({ x: node.x, y: node.y }))}\r\n        size={5}\r\n        style={{ fill: 'red' }}\r\n      />\r\n      <LabelSeries\r\n        data={nodes.map((node) => ({\r\n          x: node.x,\r\n          y: node.y,\r\n          label: node.label,\r\n          style: { fill: 'black', fontSize: '12px' }\r\n        }))}\r\n      />\r\n      <LabelSeries\r\n        data={distanceLabels}\r\n      />\r\n    </XYPlot>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
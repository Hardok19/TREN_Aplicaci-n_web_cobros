{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hardok\\\\Desktop\\\\Proyecto 3 datos 1\\\\TREN_Aplicaci-n_web_cobros-Grafos-y-admin\\\\TrainApp\\\\src\\\\GraphVisualization.js\";\nimport React from 'react';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries } from 'react-vis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = ({\n  graphData\n}) => {\n  console.log('Graph data in visualization:', graphData);\n\n  // Assign positions for nodes\n  const nodePositions = {};\n  const angleIncrement = 2 * Math.PI / graphData.Nodos.length;\n  graphData.Nodos.forEach((nodo, index) => {\n    const angle = index * angleIncrement;\n    nodePositions[nodo.Nombre] = {\n      x: 250 + 200 * Math.cos(angle),\n      y: 100 + 100 * Math.sin(angle),\n      label: nodo.Nombre\n    };\n  });\n  const nodes = Object.values(nodePositions);\n  const edges = [];\n  const labels = [];\n  graphData.Nodos.forEach(nodo => {\n    nodo.Aristas.forEach(arista => {\n      const startNode = nodePositions[nodo.Nombre];\n      const endNode = nodePositions[arista.Destino];\n      edges.push({\n        x1: startNode.x,\n        y1: startNode.y,\n        x2: endNode.x,\n        y2: endNode.y,\n        distancia: arista.Distancia\n      });\n      const midX = (startNode.x + endNode.x) / 2;\n      const midY = (startNode.y + endNode.y) / 2;\n      const direction = endNode.x > startNode.x ? '-->' : '<--';\n      labels.push({\n        x: midX,\n        y: midY,\n        label: `${arista.Distancia} km ${direction}`,\n        style: {\n          fill: 'green',\n          fontSize: '13px'\n        }\n      });\n      const arrowX = (startNode.x + midX) / 2;\n      const arrowY = (startNode.y + midY) / 2;\n      labels.push({\n        x: arrowX,\n        y: arrowY,\n        label: direction,\n        style: {\n          fill: 'blue',\n          fontSize: '13px'\n        }\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(XYPlot, {\n    width: 1000,\n    height: 600,\n    xDomain: [0, 500],\n    yDomain: [0, 200],\n    children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), edges.map((edge, index) => /*#__PURE__*/_jsxDEV(LineSeries, {\n      data: [{\n        x: edge.x1,\n        y: edge.y1\n      }, {\n        x: edge.x2,\n        y: edge.y2\n      }],\n      style: {\n        stroke: 'blue'\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(MarkSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y\n      })),\n      size: 5,\n      style: {\n        fill: 'red'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y,\n        label: node.label,\n        style: {\n          fill: 'black',\n          fontSize: '12px'\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: labels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineSeries","MarkSeries","LabelSeries","jsxDEV","_jsxDEV","GraphVisualization","graphData","console","log","nodePositions","angleIncrement","Math","PI","Nodos","length","forEach","nodo","index","angle","Nombre","x","cos","y","sin","label","nodes","Object","values","edges","labels","Aristas","arista","startNode","endNode","Destino","push","x1","y1","x2","y2","distancia","Distancia","midX","midY","direction","style","fill","fontSize","arrowX","arrowY","width","height","xDomain","yDomain","children","fileName","_jsxFileName","lineNumber","columnNumber","map","edge","data","stroke","node","size","_c","$RefreshReg$"],"sources":["C:/Users/Hardok/Desktop/Proyecto 3 datos 1/TREN_Aplicaci-n_web_cobros-Grafos-y-admin/TrainApp/src/GraphVisualization.js"],"sourcesContent":["import React from 'react';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries } from 'react-vis';\n\nconst GraphVisualization = ({ graphData }) => {\n  console.log('Graph data in visualization:', graphData);\n\n  // Assign positions for nodes\n  const nodePositions = {};\n  const angleIncrement = (2 * Math.PI) / graphData.Nodos.length;\n  graphData.Nodos.forEach((nodo, index) => {\n    const angle = index * angleIncrement;\n    nodePositions[nodo.Nombre] = {\n      x: 250 + 200 * Math.cos(angle),\n      y: 100 + 100 * Math.sin(angle),\n      label: nodo.Nombre\n    };\n  });\n\n  const nodes = Object.values(nodePositions);\n\n  const edges = [];\n  const labels = [];\n  graphData.Nodos.forEach((nodo) => {\n    nodo.Aristas.forEach((arista) => {\n      const startNode = nodePositions[nodo.Nombre];\n      const endNode = nodePositions[arista.Destino];\n\n      edges.push({\n        x1: startNode.x,\n        y1: startNode.y,\n        x2: endNode.x,\n        y2: endNode.y,\n        distancia: arista.Distancia\n      });\n\n      const midX = (startNode.x + endNode.x) / 2;\n      const midY = (startNode.y + endNode.y) / 2;\n\n      const direction = endNode.x > startNode.x ? '-->' : '<--';\n\n      labels.push({\n        x: midX,\n        y: midY,\n        label: `${arista.Distancia} km ${direction}`,\n        style: { fill: 'green', fontSize: '13px' }\n      });\n\n      const arrowX = (startNode.x + midX) / 2;\n      const arrowY = (startNode.y + midY) / 2;\n\n      labels.push({\n        x: arrowX,\n        y: arrowY,\n        label: direction,\n        style: { fill: 'blue', fontSize: '13px' }\n      });\n    });\n  });\n\n  return (\n    <XYPlot width={1000} height={600} xDomain={[0, 500]} yDomain={[0, 200]}>\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <XAxis />\n      <YAxis />\n      {edges.map((edge, index) => (\n        <LineSeries\n          key={index}\n          data={[\n            { x: edge.x1, y: edge.y1 },\n            { x: edge.x2, y: edge.y2 }\n          ]}\n          style={{ stroke: 'blue' }}\n        />\n      ))}\n      <MarkSeries\n        data={nodes.map((node) => ({ x: node.x, y: node.y }))}\n        size={5}\n        style={{ fill: 'red' }}\n      />\n      <LabelSeries\n        data={nodes.map((node) => ({\n          x: node.x,\n          y: node.y,\n          label: node.label,\n          style: { fill: 'black', fontSize: '12px' }\n        }))}\n      />\n      <LabelSeries\n        data={labels}\n      />\n    </XYPlot>\n  );\n};\n\nexport default GraphVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
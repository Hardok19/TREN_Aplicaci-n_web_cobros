{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tenci\\\\OneDrive\\\\Escritorio\\\\Nueva carpeta\\\\TREN_Aplicaci-n_web_cobros\\\\TrainApp\\\\src\\\\GraphVisualization.js\";\nimport React from 'react';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries } from 'react-vis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = ({\n  graphData\n}) => {\n  console.log('Graph data in visualization:', graphData);\n\n  // Assign positions for nodes\n  const nodePositions = {};\n  const angleIncrement = 2 * Math.PI / graphData.Nodos.length;\n  graphData.Nodos.forEach((nodo, index) => {\n    const angle = index * angleIncrement;\n    nodePositions[nodo.Nombre] = {\n      x: 100 + 40 * Math.cos(angle),\n      y: 100 + 40 * Math.sin(angle),\n      label: nodo.Nombre\n    };\n  });\n  const nodes = Object.values(nodePositions);\n  const edges = [];\n  const arrowHeads = [];\n  const distanceLabels = [];\n  graphData.Nodos.forEach(nodo => {\n    nodo.Aristas.forEach(arista => {\n      const startNode = nodePositions[nodo.Nombre];\n      const endNode = nodePositions[arista.Destino];\n      edges.push({\n        x: [startNode.x, endNode.x],\n        y: [startNode.y, endNode.y]\n      });\n      const midX = (startNode.x + endNode.x) / 2;\n      const midY = (startNode.y + endNode.y) / 2;\n      const arrowAngle = Math.atan2(endNode.y - startNode.y, endNode.x - startNode.x);\n      const arrowHeadLength = 2;\n      arrowHeads.push({\n        x: midX - arrowHeadLength * Math.cos(arrowAngle - Math.PI / 6),\n        y: midY - arrowHeadLength * Math.sin(arrowAngle - Math.PI / 6)\n      });\n      arrowHeads.push({\n        x: midX - arrowHeadLength * Math.cos(arrowAngle + Math.PI / 6),\n        y: midY - arrowHeadLength * Math.sin(arrowAngle + Math.PI / 6)\n      });\n      distanceLabels.push({\n        x: midX,\n        y: midY,\n        label: `${arista.Distancia} km`,\n        style: {\n          fill: 'green',\n          fontSize: '10px'\n        }\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(XYPlot, {\n    width: 600,\n    height: 600,\n    xDomain: [0, 100],\n    yDomain: [0, 100],\n    children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), edges.map((edge, index) => /*#__PURE__*/_jsxDEV(LineSeries, {\n      data: [{\n        x: edge.x[0],\n        y: edge.y[0]\n      }, {\n        x: edge.x[1],\n        y: edge.y[1]\n      }],\n      style: {\n        stroke: 'blue'\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(MarkSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y\n      })),\n      size: 5,\n      style: {\n        fill: 'red'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y,\n        label: node.label,\n        style: {\n          fill: 'black',\n          fontSize: '12px'\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MarkSeries, {\n      data: arrowHeads.map(point => ({\n        x: point.x,\n        y: point.y\n      })),\n      size: 3,\n      style: {\n        fill: 'blue',\n        shape: 'triangle'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: distanceLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineSeries","MarkSeries","LabelSeries","jsxDEV","_jsxDEV","GraphVisualization","graphData","console","log","nodePositions","angleIncrement","Math","PI","Nodos","length","forEach","nodo","index","angle","Nombre","x","cos","y","sin","label","nodes","Object","values","edges","arrowHeads","distanceLabels","Aristas","arista","startNode","endNode","Destino","push","midX","midY","arrowAngle","atan2","arrowHeadLength","Distancia","style","fill","fontSize","width","height","xDomain","yDomain","children","fileName","_jsxFileName","lineNumber","columnNumber","map","edge","data","stroke","node","size","point","shape","_c","$RefreshReg$"],"sources":["C:/Users/tenci/OneDrive/Escritorio/Nueva carpeta/TREN_Aplicaci-n_web_cobros/TrainApp/src/GraphVisualization.js"],"sourcesContent":["import React from 'react';\r\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries } from 'react-vis';\r\n\r\nconst GraphVisualization = ({ graphData }) => {\r\n  console.log('Graph data in visualization:', graphData);\r\n\r\n  // Assign positions for nodes\r\n  const nodePositions = {};\r\n  const angleIncrement = (2 * Math.PI) / graphData.Nodos.length;\r\n  graphData.Nodos.forEach((nodo, index) => {\r\n    const angle = index * angleIncrement;\r\n    nodePositions[nodo.Nombre] = {\r\n      x: 100 + 40 * Math.cos(angle),\r\n      y: 100 + 40 * Math.sin(angle),\r\n      label: nodo.Nombre\r\n    };\r\n  });\r\n\r\n  const nodes = Object.values(nodePositions);\r\n\r\n  const edges = [];\r\n  const arrowHeads = [];\r\n  const distanceLabels = [];\r\n  graphData.Nodos.forEach((nodo) => {\r\n    nodo.Aristas.forEach((arista) => {\r\n      const startNode = nodePositions[nodo.Nombre];\r\n      const endNode = nodePositions[arista.Destino];\r\n\r\n      edges.push({\r\n        x: [startNode.x, endNode.x],\r\n        y: [startNode.y, endNode.y]\r\n      });\r\n\r\n      const midX = (startNode.x + endNode.x) / 2;\r\n      const midY = (startNode.y + endNode.y) / 2;\r\n\r\n      const arrowAngle = Math.atan2(endNode.y - startNode.y, endNode.x - startNode.x);\r\n      const arrowHeadLength = 2;\r\n\r\n      arrowHeads.push({\r\n        x: midX - arrowHeadLength * Math.cos(arrowAngle - Math.PI / 6),\r\n        y: midY - arrowHeadLength * Math.sin(arrowAngle - Math.PI / 6)\r\n      });\r\n\r\n      arrowHeads.push({\r\n        x: midX - arrowHeadLength * Math.cos(arrowAngle + Math.PI / 6),\r\n        y: midY - arrowHeadLength * Math.sin(arrowAngle + Math.PI / 6)\r\n      });\r\n\r\n      distanceLabels.push({\r\n        x: midX,\r\n        y: midY,\r\n        label: `${arista.Distancia} km`,\r\n        style: { fill: 'green', fontSize: '10px' }\r\n      });\r\n    });\r\n  });\r\n\r\n  return (\r\n    <XYPlot width={600} height={600} xDomain={[0, 100]} yDomain={[0, 100]}>\r\n      <VerticalGridLines />\r\n      <HorizontalGridLines />\r\n      <XAxis />\r\n      <YAxis />\r\n      {edges.map((edge, index) => (\r\n        <LineSeries\r\n          key={index}\r\n          data={[\r\n            { x: edge.x[0], y: edge.y[0] },\r\n            { x: edge.x[1], y: edge.y[1] }\r\n          ]}\r\n          style={{ stroke: 'blue' }}\r\n        />\r\n      ))}\r\n      <MarkSeries\r\n        data={nodes.map((node) => ({ x: node.x, y: node.y }))}\r\n        size={5}\r\n        style={{ fill: 'red' }}\r\n      />\r\n      <LabelSeries\r\n        data={nodes.map((node) => ({\r\n          x: node.x,\r\n          y: node.y,\r\n          label: node.label,\r\n          style: { fill: 'black', fontSize: '12px' }\r\n        }))}\r\n      />\r\n      <MarkSeries\r\n        data={arrowHeads.map((point) => ({ x: point.x, y: point.y }))}\r\n        size={3}\r\n        style={{ fill: 'blue', shape: 'triangle' }}\r\n      />\r\n      <LabelSeries\r\n        data={distanceLabels}\r\n      />\r\n    </XYPlot>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
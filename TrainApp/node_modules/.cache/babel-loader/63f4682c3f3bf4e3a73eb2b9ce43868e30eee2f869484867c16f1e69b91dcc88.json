{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tenci\\\\OneDrive\\\\Escritorio\\\\Nueva carpeta\\\\TREN_Aplicaci-n_web_cobros\\\\TrainApp\\\\src\\\\GraphVisualization.js\";\nimport React from 'react';\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries, CustomSVGSeries } from 'react-vis';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = ({\n  graphData\n}) => {\n  console.log('Graph data in visualization:', graphData);\n\n  // Assign positions for nodes\n  const nodePositions = {};\n  const angleIncrement = 2 * Math.PI / graphData.Nodos.length;\n  graphData.Nodos.forEach((nodo, index) => {\n    const angle = index * angleIncrement;\n    nodePositions[nodo.Nombre] = {\n      x: 250 + 200 * Math.cos(angle),\n      y: 100 + 100 * Math.sin(angle),\n      label: nodo.Nombre\n    };\n  });\n  const nodes = Object.values(nodePositions);\n  const edges = [];\n  const distanceLabels = [];\n  const arrows = [];\n  graphData.Nodos.forEach(nodo => {\n    nodo.Aristas.forEach(arista => {\n      const startNode = nodePositions[nodo.Nombre];\n      const endNode = nodePositions[arista.Destino];\n      edges.push({\n        x1: startNode.x,\n        y1: startNode.y,\n        x2: endNode.x,\n        y2: endNode.y,\n        distancia: arista.Distancia\n      });\n      const midX = (startNode.x + endNode.x) / 2;\n      const midY = (startNode.y + endNode.y) / 2;\n      distanceLabels.push({\n        x: midX,\n        y: midY,\n        label: `${arista.Distancia} km`,\n        style: {\n          fill: 'green',\n          fontSize: '13px'\n        }\n      });\n      const angle = Math.atan2(endNode.y - startNode.y, endNode.x - startNode.x);\n      const arrowSize = 5;\n      const arrowX = midX + arrowSize * Math.cos(angle) - arrowSize / 2;\n      const arrowY = midY + arrowSize * Math.sin(angle) - arrowSize / 2;\n      arrows.push({\n        x: arrowX,\n        y: arrowY,\n        angle: angle,\n        size: arrowSize\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(XYPlot, {\n    width: 1000,\n    height: 600,\n    xDomain: [0, 500],\n    yDomain: [0, 200],\n    children: [/*#__PURE__*/_jsxDEV(VerticalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalGridLines, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), edges.map((edge, index) => /*#__PURE__*/_jsxDEV(LineSeries, {\n      data: [{\n        x: edge.x1,\n        y: edge.y1\n      }, {\n        x: edge.x2,\n        y: edge.y2\n      }],\n      style: {\n        stroke: 'blue'\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(MarkSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y\n      })),\n      size: 5,\n      style: {\n        fill: 'red'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: nodes.map(node => ({\n        x: node.x,\n        y: node.y,\n        label: node.label,\n        style: {\n          fill: 'black',\n          fontSize: '12px'\n        }\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LabelSeries, {\n      data: distanceLabels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomSVGSeries, {\n      data: arrows.map(arrow => ({\n        x: arrow.x,\n        y: arrow.y,\n        customComponent: ({\n          x,\n          y\n        }) => /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: `${x},${y} ${x - arrow.size},${y - arrow.size / 2} ${x - arrow.size},${y + arrow.size / 2}`,\n          fill: \"blue\",\n          transform: `rotate(${arrow.angle * 180 / Math.PI},${x},${y})`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","XYPlot","XAxis","YAxis","VerticalGridLines","HorizontalGridLines","LineSeries","MarkSeries","LabelSeries","CustomSVGSeries","jsxDEV","_jsxDEV","GraphVisualization","graphData","console","log","nodePositions","angleIncrement","Math","PI","Nodos","length","forEach","nodo","index","angle","Nombre","x","cos","y","sin","label","nodes","Object","values","edges","distanceLabels","arrows","Aristas","arista","startNode","endNode","Destino","push","x1","y1","x2","y2","distancia","Distancia","midX","midY","style","fill","fontSize","atan2","arrowSize","arrowX","arrowY","size","width","height","xDomain","yDomain","children","fileName","_jsxFileName","lineNumber","columnNumber","map","edge","data","stroke","node","arrow","customComponent","points","transform","_c","$RefreshReg$"],"sources":["C:/Users/tenci/OneDrive/Escritorio/Nueva carpeta/TREN_Aplicaci-n_web_cobros/TrainApp/src/GraphVisualization.js"],"sourcesContent":["import React from 'react';\r\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, MarkSeries, LabelSeries, CustomSVGSeries } from 'react-vis';\r\n\r\nconst GraphVisualization = ({ graphData }) => {\r\n  console.log('Graph data in visualization:', graphData);\r\n\r\n  // Assign positions for nodes\r\n  const nodePositions = {};\r\n  const angleIncrement = (2 * Math.PI) / graphData.Nodos.length;\r\n  graphData.Nodos.forEach((nodo, index) => {\r\n    const angle = index * angleIncrement;\r\n    nodePositions[nodo.Nombre] = {\r\n      x: 250 + 200 * Math.cos(angle),\r\n      y: 100 + 100 * Math.sin(angle),\r\n      label: nodo.Nombre\r\n    };\r\n  });\r\n\r\n  const nodes = Object.values(nodePositions);\r\n\r\n  const edges = [];\r\n  const distanceLabels = [];\r\n  const arrows = [];\r\n  graphData.Nodos.forEach((nodo) => {\r\n    nodo.Aristas.forEach((arista) => {\r\n      const startNode = nodePositions[nodo.Nombre];\r\n      const endNode = nodePositions[arista.Destino];\r\n\r\n      edges.push({\r\n        x1: startNode.x,\r\n        y1: startNode.y,\r\n        x2: endNode.x,\r\n        y2: endNode.y,\r\n        distancia: arista.Distancia\r\n      });\r\n\r\n      const midX = (startNode.x + endNode.x) / 2;\r\n      const midY = (startNode.y + endNode.y) / 2;\r\n\r\n      distanceLabels.push({\r\n        x: midX,\r\n        y: midY,\r\n        label: `${arista.Distancia} km`,\r\n        style: { fill: 'green', fontSize: '13px' }\r\n      });\r\n\r\n      const angle = Math.atan2(endNode.y - startNode.y, endNode.x - startNode.x);\r\n      const arrowSize = 5;\r\n      const arrowX = midX + arrowSize * Math.cos(angle) - arrowSize / 2;\r\n      const arrowY = midY + arrowSize * Math.sin(angle) - arrowSize / 2;\r\n\r\n      arrows.push({\r\n        x: arrowX,\r\n        y: arrowY,\r\n        angle: angle,\r\n        size: arrowSize\r\n      });\r\n    });\r\n  });\r\n\r\n  return (\r\n    <XYPlot width={1000} height={600} xDomain={[0, 500]} yDomain={[0, 200]}>\r\n      <VerticalGridLines />\r\n      <HorizontalGridLines />\r\n      <XAxis />\r\n      <YAxis />\r\n      {edges.map((edge, index) => (\r\n        <LineSeries\r\n          key={index}\r\n          data={[\r\n            { x: edge.x1, y: edge.y1 },\r\n            { x: edge.x2, y: edge.y2 }\r\n          ]}\r\n          style={{ stroke: 'blue' }}\r\n        />\r\n      ))}\r\n      <MarkSeries\r\n        data={nodes.map((node) => ({ x: node.x, y: node.y }))}\r\n        size={5}\r\n        style={{ fill: 'red' }}\r\n      />\r\n      <LabelSeries\r\n        data={nodes.map((node) => ({\r\n          x: node.x,\r\n          y: node.y,\r\n          label: node.label,\r\n          style: { fill: 'black', fontSize: '12px' }\r\n        }))}\r\n      />\r\n      <LabelSeries\r\n        data={distanceLabels}\r\n      />\r\n      <CustomSVGSeries\r\n        data={arrows.map((arrow) => ({\r\n          x: arrow.x,\r\n          y: arrow.y,\r\n          customComponent: ({ x, y }) => (\r\n            <polygon\r\n              points={`${x},${y} ${x - arrow.size},${y - arrow.size / 2} ${x - arrow.size},${y + arrow.size / 2}`}\r\n              fill=\"blue\"\r\n              transform={`rotate(${(arrow.angle * 180) / Math.PI},${x},${y})`}\r\n            />\r\n          )\r\n        }))}\r\n      />\r\n    </XYPlot>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}